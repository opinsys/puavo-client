#!/usr/bin/ruby1.9.1

require "puavo"
require "optparse"
require "rest-client"
require "addressable/uri"
require "pp"

def inject_auth(url, user, password)
  u = Addressable::URI.parse(url)
  u.user = user
  u.password = password
  u.to_s
end

options = {
  :printers_conf => "/etc/cups/printers.conf"
}

parser = OptionParser.new do |opts|
  opts.banner = "
  Usage: #{ File.basename(__FILE__) } [options] [cups printers config]

  Synchronize CUPS printers to Puavo. Printers are identified by their
  description in the CUPS config.

  NOTE: Currently printer attributes won't be updated if the printer already
  exists in Puavo.

  Be default printers are read from #{ options[:printers_conf] }
  "

  opts.on("--get-printers-url [URL]", "Url where to fetch current printers") do |url|
    options[:get_printers] = url
  end

  opts.on("--post-printers-url [URL]", "Url where to post printers") do |url|
    options[:post_printers] = url
  end

  opts.on("-s", "--server-dn [DN]", "Server DN") do |server|
    options[:server_dn] = server
  end

  opts.on("-u", "--user [USER]", "Username or dn") do |username|
    options[:user] = username
  end

  opts.on("-p", "--password [PASWORD]", "Password") do |pw|
    options[:password] = pw
  end

  opts.on_tail("-h", "--help", "Show this message") do
    STDERR.puts opts
    exit
  end

end

parser.parse!

options[:printers_conf] = ARGV[0] if ARGV[0]
options[:server_dn] ||= PUAVO_ETC.ldap_dn
options[:get_printers] ||= "#{ `puavo-resolve-api-server` }/v3/printer_queues"
options[:post_printers] ||= "https://#{ PUAVO_ETC.domain }/devices/printers.json"
options[:user] ||= PUAVO_ETC.ldap_dn
options[:password] ||= PUAVO_ETC.ldap_password

options[:get_printers] = inject_auth(
  options[:get_printers],
  options[:user],
  options[:password]
)

options[:post_printers] = inject_auth(
  options[:post_printers],
  options[:user],
  options[:password]
)

# From https://github.com/opinsys/liitu-puppet/blob/25c92e5c85e8637cdbd04c390f98eca69d3cc68b/modules/service/templates/usr/local/sbin/send_printers_to_puavo#L18-L40
def parse_cups_printers_conf(conf_path)
  printers_conf = File.readlines(conf_path)

  printers = {}
  description  = nil

  printers_conf.each do |line|
    match = line.match(/^<(?:DefaultPrinter|Printer) (.*)>$/)
    if match
      description = match[1]
      printers[description] = {}
    elsif line.match(%r{^</Printer>$})
      description = nil
    else
      if description then
        _, key, value = * line.match(/^([^ ]+) (.*)$/)
        printers[description][key] = value
      end
    end
  end

  printers
end

current_printers = RestClient.get(options[:get_printers],
  :params => {
    :server => options[:server_dn]
  }
)

current_printers = JSON.parse(current_printers)
current_printer_descriptions = current_printers.map do |p|
  p["description"]
end

parse_cups_printers_conf(options[:printers_conf]).each do |description, info|

  # TODO: We might want to check if any of the attributes has been changed and
  # update the printer. Now we only send the printer data if it is completely
  # new.
  if current_printer_descriptions.include?(description)
    next
  end

  printer = {
    "printerDescription" => description,
    "printerLocation" => info["Location"] || "",
    "printerMakeAndModel" => info["MakeModel"] || "",
    "printerType" => info["Type"] || "" ,
    "printerURI" => info["DeviceURI"] || "" ,
    "puavoServer" => options[:server_dn]
  }

  puts "Adding #{ printer.inspect }"
  RestClient.post(options[:post_printers], printer.to_json,
    :content_type => :json,
    :accept => :json
  )

end
