#!/usr/bin/env ruby1.9.1

require "digest/sha1"
require "fileutils"
require "json"
require "optparse"
require "puavo"
require "puavo/rest-client"
require "uri"

options = {}

parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{ File.basename(__FILE__) } [options] [target]"

  opts.on("-s", "--server [SERVER]", "Puavo REST server URI") do |server|
    options[:server] = server
  end

  opts.on("-h", "--hostname [HOSTNAME]", "Client hostname") do |hostname|
    options[:hostname] = hostname
  end

  opts.on_tail("-h", "--help", "Show this message") do
    puts opts
    exit
  end

end
parser.parse!

def check_call(cmd)
  res = `#{ cmd }`
  if $?.success?
    return res.chomp
  else
    raise "Failed to execute '#{ cmd }'"
  end
end

options[:target] = ARGV[0] || "/state/external_files"
options[:server] ||= check_call "puavo-resolve-api-server"
options[:hostname] ||= PUAVO_ETC.hostname

def read_current_files(dirpath)
  Dir.entries(dirpath).map do |name|
    begin
      File.open(File.join(dirpath, name), "rb") do |f|
        sha1 = Digest::SHA1.new

        while data = f.read(512)
          sha1.update(data)
        end

        {
          "name" => name,
          "data_hash" => sha1.hexdigest
        }
      end
    rescue Errno::EISDIR
    end
  end.compact
end

class ExternalFiles
  def initialize(base_path)
    @base_path = base_path

    case PUAVO_ETC.hosttype
      when 'laptop', 'wirelessaccesspoint'
        auth_type = :etc
      else
        auth_type = :bootserver
    end

    @client = PuavoRestClient.new :auth => auth_type
  end

  def data(name='')
    uri =  name != ''  ?  "#{ @base_path }/#{ name }"  :  @base_path
    @client.get(uri)
  end

  def index
    JSON.parse( data() )
  end
end

def main(options)
  FileUtils.mkdir_p(options[:target])

  files_to_remove = Hash[
    Dir.glob("#{ options[:target] }/*").map { |k| [ k, 1 ] }
  ]

  current_files = read_current_files(options[:target])

  ef_urlpath = "/v3/devices/#{ options[:hostname] }/external_files"
  ef = ExternalFiles.new(ef_urlpath)

  ef.index.each do |meta|
    file_path = File.join(options[:target], meta["name"])

    files_to_remove.delete(file_path)

    if current_files.include?(meta)
      puts "OK #{ file_path } #{ meta["data_hash"] }"
      next
    end

    File.open(file_path, "w") do |f|
      puts "Writing #{ file_path } #{ meta["data_hash"] }"
      f.write(ef.data(meta["name"]))
    end
  end

  files_to_remove.each_key do |path|
    begin
      puts "Removing #{ path }"
      File.unlink(path)
    rescue StandardError => e
      warn("Could not unlink #{ path }: #{ e.message }")
    end
  end
end

if __FILE__ == $0
  main(options)
end
