#!/usr/bin/ruby

require 'puavo'
require 'dnsruby'
require 'trollop'
include Dnsruby

opts = Trollop::options do
  banner <<-EOS

  Resolve local puavo api server from dns. If the device type is laptop and 
  dns resolve fails it will return the public server. Prints out the URL 
  for the puavo-rest server in format https://hostname:port

  Usage: puavo-resolve-api-server [options]

EOS

  opt :cloud_fallback, "Fallback to cloud puavo-rest if bootserver dns lookup fails"
  opt :timeout, "Timeout in seconds for dns query before returning the cloud fallback server [default=3]", :type => Integer
  opt :help, "Print help"
end

if opts[:help]
  exit
end

if !opts[:timeout]
  opts[:timeout] = 3
end

domain = PUAVO_ETC.domain
hosttype = PUAVO_ETC.hosttype

if hosttype and (hosttype.eql?("laptop") or hosttype.eql?("wirelessaccesspoint"))
  opts[:cloud_fallback] = true
end

if !domain
  STDERR.puts "ERROR: Puavo domain not set!"

  exit 1
end

res   = Resolver.new(:query_timeout => opts[:timeout])

begin
  ret = res.query("_puavo-api._tcp.#{domain}", 'SRV')

  ret.answer.rrset("_puavo-api._tcp.#{domain}", Types.SRV).rrs.each do |rr|
    puts "https://#{rr.target.to_s}:#{rr.port}"

    exit 0
  end
rescue
end

if opts[:cloud_fallback]
  puts "https://#{domain}"
  exit 0
end
